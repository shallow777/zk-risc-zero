// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use anyhow::Result;
use risc0_circuit_bigint::{zkr::get_zkr, BigIntProgram, BIGINT_PO2};
use risc0_zkp::core::{digest::Digest, hash::poseidon2::Poseidon2HashSuite};
use risc0_zkvm::recursion::MerkleGroup;

fn compute_control_id(prog: &BigIntProgram) -> Result<Digest> {
    let program = get_zkr(&format!("{}.zkr", prog.name), BIGINT_PO2)?;
    let hash_suite = Poseidon2HashSuite::new_suite();
    Ok(program.compute_control_id(hash_suite))
}

fn compute_control_root(prog: &BigIntProgram) -> Result<Digest> {
    let control_id = compute_control_id(prog)?;
    let hash_suite = Poseidon2HashSuite::new_suite();
    let hashfn = hash_suite.hashfn.as_ref();
    let group = MerkleGroup::new(vec![control_id])?;
    Ok(group.calc_root(hashfn))
}

pub fn main() -> Result<()> {
    println!(
        r#"// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated by:
//   cargo run -p risc0-circuit-bigint -F make_control_ids --bin make_control_ids > risc0/circuit/bigint/src/control_id.rs

use risc0_zkp::{{core::digest::Digest, digest}};"#
    );

    for i in risc0_circuit_bigint::PROGRAMS {
        let name = i.name.to_string().to_uppercase();
        let control_id = compute_control_id(i)?;
        let control_root = compute_control_root(i)?;

        println!(
            r#"
pub const {name}_CONTROL_ID: Digest =
    digest!("{control_id}");
pub const {name}_CONTROL_ROOT: Digest =
    digest!("{control_root}");"#
        );
    }
    Ok(())
}
